---
- name: copy war file to tmp
  copy:
    src: /opt/project/mycode-1.0-SNAPSHOT.war
    dest: /tmp/test.war

- name: stop previous containers if exists
  command: docker stop "{{ item }}"
  ignore_errors: yes
  with_items:
    - webapp1
    - webapp2
    - httplb

- name: delete previous containers
  command: docker rm "{{ item }}"
  ignore_errors: yes
  with_items:
    - webapp1
    - webapp2
    - httplb

- name: create docker container. note containers hasn't started yet
  command: docker create --name "{{ item.value.NAME }}" --network brdgnet1 -p "{{ item.value.PORT }}":8080 tomcat:7
  with_dict: "{{ webapp }}"


- name: copy war to webapp directory
  command: docker cp /tmp/test.war "{{ item }}"://usr/local/tomcat/webapps/test.war
  with_items:
    - webapp1
    - webapp2

- name: start docker container
  command: docker start "{{ item }}"
  with_items:
    - webapp1
    - webapp2

- name: regiser ip address of webapp servers
  command: docker inspect -f '{''{ .NetworkSettings.Networks.brdgnet1.IPAddress }''}' "{{ item }}"
  register: r
  with_items:
    - webapp1
    - webapp2

- debug: msg="get data of {{ item.item }}"
  with_items: "{{r.results}}"

- set_fact:
    app: "{{ r.results | map(attribute='stdout') | list }}"

- debug: var=app
